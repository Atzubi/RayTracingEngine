//
// Created by sebastian on 13.11.19.
//

#ifndef RAYTRACECORE_OBJECT_H
#define RAYTRACECORE_OBJECT_H

#include <vector>
#include <cstdint>
#include "BasicStructures.h"

/**
 * RayTracerOutput contains the data that is generated by the ray tracer.
 * intersectionPoint:   the intersection point of the ray generated by the RayGeneratorShader and the geometry bound to
 *                      this pipeline
 * normal:              the (interpolated) normal of the triangle hit at intersectionPoint
 * map:                 the (interpolated) mapping coordinates of the triangle hit at intersectionPoint
 * objectId:            the object id of the object hit
 */
struct IntersectionInfo {
    bool hit;
    double distance;
    Vector3D rayOrigin;
    Vector3D rayDirection;
    Vector3D normal;
    Vector3D position;
    Vector2D texture;
    Material *material;
};

class Object {
public:
    /*
     * Default destructor
     */
    virtual ~Object() = default;

    /*
     * Clones the object
     * return:          pointer to a new copy
     */
    virtual Object *clone() = 0;

    /*
     * Returns the bounding box of the objects geometry.
     * return:          the bounding box of the object
     */
    virtual BoundingBox getBoundaries() = 0;

    /*
     * Computes the intersection with ray and this object.
     * return:          information about the intersection
     */
    virtual bool intersectFirst(IntersectionInfo *intersectionInfo, Ray *ray) = 0;

    virtual bool intersectAny(IntersectionInfo *intersectionInfo, Ray *ray) = 0;

    virtual bool intersectAll(std::vector<IntersectionInfo *> *intersectionInfo, Ray *ray) = 0;

    virtual double getSurfaceArea() = 0;

    virtual bool operator==(Object *object) = 0;
};

#endif //RAYTRACECORE_OBJECT_H
